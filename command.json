{
  "name": "bedrock",
  "description": "Command line interface for creating and controlling Bedrock projects",
  "commands": [
    {
      "name": "create",
      "description": "Create a new Bedrock project.",
      "arguments": [
        {
          "name": "project",
          "type": "string",
          "description": "Project name",
          "required": true,
          "prompt": true
        }
      ],
      "options": [
        {
          "name": "domain",
          "type": "domain",
          "description": "Domain",
          "required": true,
          "prompt": true
        },
        {
          "name": "repository",
          "type": "repository",
          "description": "Git repository",
          "required": false,
          "prompt": true
        },
        {
          "name": "address",
          "type": "string",
          "description": "Company address",
          "required": false,
          "prompt": true
        },
        {
          "name": "admin-password",
          "type": "string",
          "description": "Admin password",
          "required": false,
          "prompt": true
        }
      ]
    },
    {
      "name": "generate",
      "description": "Generate new Bedrock resources.",
      "commands": [
        {
          "name": "model",
          "description": "Generate Mongoose models"
        },
        {
          "name": "routes",
          "description": "Generate API routes",
          "options": [
            {
              "name": "models",
              "type": "array",
              "description": "List of models (comma separated string)."
            }
          ]
        },
        {
          "name": "docs",
          "description": "Generate documentation",
          "options": [
            {
              "name": "models",
              "type": "array",
              "description": "List of models (comma separated string)."
            }
          ]
        },
        {
          "name": "screens",
          "description": "Generate top level screens",
          "options": [
            {
              "name": "models",
              "type": "array",
              "description": "List of models (comma separated string)."
            }
          ]
        },
        {
          "name": "subscreens",
          "description": "Generate sub level screens for references",
          "options": [
            {
              "name": "models",
              "type": "array",
              "description": "List of models (comma separated string)."
            }
          ]
        },
        {
          "name": "modal",
          "description": "Generate create/update modal",
          "options": [
            {
              "name": "models",
              "type": "array",
              "description": "List of models (comma separated string)."
            }
          ]
        }
      ],
      "options": [
        {
          "name": "ref",
          "type": "string",
          "description": "A ref to pull code against. May be a tag. Will default to master."
        }
      ]
    },
    {
      "name": "plugins",
      "description": "Manage Bedrock plugins.",
      "commands": [
        {
          "name": "list",
          "description": "List all available plugins"
        },
        {
          "name": "info",
          "description": "Get information on plugin",
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "description": "Plugin name (e.g. @bedrockio/analytics)",
              "required": true,
              "prompt": false
            }
          ]
        },
        {
          "name": "apply",
          "description": "Install plugin into current codebase",
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "description": "Plugin name (e.g. @bedrockio/analytics)",
              "required": true,
              "prompt": false
            }
          ]
        }
      ]
    },
    {
      "name": "cloud",
      "description": "Cloud Controls for deployment and provisioning",
      "commands": [
        {
          "name": "login",
          "description": "Login to Google Cloud"
        },
        {
          "name": "login-application",
          "functionName": "applicationLogin",
          "description": "Login application-default to Google Cloud"
        },
        {
          "name": "account",
          "description": "Set Google Cloud account",
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "description": "Switch to Google Cloud account with <name> (e.g. john.doe@gmail.com)"
            }
          ]
        },
        {
          "name": "authorize",
          "description": "Authorize cloud environment",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            }
          ]
        },
        {
          "name": "status",
          "description": "Get status of cloud deployment",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            }
          ]
        },
        {
          "name": "build",
          "description": "Build service container",
          "options": [
            {
              "name": "remote",
              "description": "Build remotely. Must have Cloud Build API enabled (https://bit.ly/3BC55o5)."
            },
            {
              "name": "native",
              "description": "Build using native CPU architecture."
            }
          ],
          "arguments": [
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            },
            {
              "name": "tag",
              "type": "string",
              "description": "Image Tag, defaults to latest (e.g. v1.2)"
            }
          ]
        },
        {
          "name": "push",
          "description": "Push service container to gcr.io",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            },
            {
              "name": "tag",
              "type": "string",
              "description": "Image Tag, defaults to latest (e.g. v1.2)"
            }
          ]
        },
        {
          "name": "rollout",
          "description": "Rollout service to cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "deploy",
          "description": "Build, push and rollout service to cluster",
          "options": [
            {
              "name": "all",
              "description": "Deploy all services."
            },
            {
              "name": "remote",
              "description": "Build remotely. Must have Cloud Build API enabled (https://bit.ly/3BC55o5)."
            },
            {
              "name": "subdeployment",
              "type": "string",
              "description": "Deploy a subdeployment created with \"bedrock cloud subdeployment create\"."
            }
          ],
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            },
            {
              "name": "tag",
              "type": "string",
              "description": "Image Tag, defaults to latest (e.g. v1.2)"
            }
          ]
        },
        {
          "name": "undeploy",
          "description": "Delete service from cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "info",
          "description": "Deployment info",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "shell",
          "description": "Start remote bash shell on service container",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "logs",
          "description": "Open Google Cloud logs explorer UI in your browser",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            }
          ]
        },
        {
          "name": "bootstrap",
          "description": "Bootstrap GKE cluster",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "project",
              "type": "string",
              "description": "Google Cloud project id (e.g. bedrock-foundation)"
            }
          ]
        },
        {
          "name": "port-forward",
          "description": "port-forward service to localhost",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            },
            {
              "name": "service",
              "type": "string",
              "description": "Service (e.g. api)"
            },
            {
              "name": "subservice",
              "type": "string",
              "description": "SubService (e.g. cli)"
            },
            {
              "name": "localPort",
              "type": "string",
              "description": "Local Port number"
            },
            {
              "name": "remotePort",
              "type": "string",
              "description": "Remote Port number"
            }
          ]
        },
        {
          "name": "provision",
          "description": "Provision cluster on Google Cloud with Terraform (subcommands: <plan>, <apply>, <init> and <destroy>)",
          "commands": [
            {
              "name": "plan",
              "functionName": "terraformPlan",
              "description": "Terraform plan provisioning of cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "apply",
              "functionName": "terraformApply",
              "description": "Terraform apply provisioning plan of cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "init",
              "functionName": "terraformInit",
              "description": "Terraform initialize provisioning",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "refresh",
              "functionName": "terraformRefresh",
              "description": "Terraform apply -refresh-only",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "reconfigure",
              "functionName": "terraformReconfigure",
              "description": "Terraform initialize provisioning with -reconfigure",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "migrate",
              "functionName": "terraformMigrate",
              "description": "Terraform initialize provisioning with -migrate-state",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            },
            {
              "name": "destroy",
              "functionName": "terraformDestroy",
              "description": "Terraform destroy provisioned cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ]
            }
          ]
        },
        {
          "name": "secret",
          "description": "Deploy and update Secrets (subcommands: <get>, <set>, <info> and <delete>)",
          "commands": [
            {
              "name": "get",
              "functionName": "secretGet",
              "description": "Get Secret from cluster and store in local <secret-name>.conf file",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "set",
              "functionName": "secretSet",
              "description": "Push secret to cluster from local <secret-name>.conf file",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "info",
              "functionName": "secretInfo",
              "description": "Retrieve secret info from cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            },
            {
              "name": "delete",
              "functionName": "secretDelete",
              "description": "Delete secret from cluster",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Secret name (e.g. credentials)"
                }
              ]
            }
          ]
        },
        {
          "name": "subdeployment",
          "description": "Create or destroy subdeployments for feature branches (subcommands <create> and <destroy>).",
          "commands": [
            {
              "name": "create",
              "description": "Create a subdeployment. Creates new kubernetes resources and adds rules to ingress.",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                },
                {
                  "name": "service",
                  "type": "string",
                  "description": "Service to base subdeployment off of (e.g. web, api)"
                },
                {
                  "name": "subservice",
                  "type": "string",
                  "description": "SubService (e.g. cli)"
                }
              ],
              "options": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Subdeployment name. Will be used in kubernetes resource files."
                },
                {
                  "name": "domain",
                  "type": "string",
                  "description": "Domain the subdeployment will be hosted on. If not specified this\nwill be generated by appending a subdomain (test.example.com or test-api.example.com)."
                }
              ]
            },
            {
              "name": "destroy",
              "description": "Destroys a subdeployment. Deletes existing kubernetes resources and removes rules from ingress.",
              "arguments": [
                {
                  "name": "environment",
                  "type": "string",
                  "description": "Environment (e.g. staging)"
                }
              ],
              "options": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Subdeployment name to be deleted."
                }
              ]
            }
          ]
        },
        {
          "name": "export",
          "description": "Export models to a zip file that can be used as fixtures.",
          "arguments": [
            {
              "name": "environment",
              "type": "string",
              "description": "Environment (e.g. staging)"
            }
          ],
          "options": [
            {
              "name": "models",
              "type": "string",
              "description": "Comma separated list of Mongoose model names to export."
            },
            {
              "name": "ids",
              "type": "string",
              "description": "Comma separated list of ObjectIds to export."
            }
          ]
        }
      ]
    },
    {
      "name": "update",
      "description": "Updates this script."
    },
    {
      "name": "sha",
      "description": "Shows current commit hash (SHA)"
    }
  ]
}
